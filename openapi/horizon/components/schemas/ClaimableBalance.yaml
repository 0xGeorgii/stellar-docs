Claimable Balance:
  type: object
  description: When Horizon returns information about a claimable balance, it will use this format.
  x-tags:
    - Claimable Balances
  properties:
    _links:
      type: object
      properties:
        self:
          $ref: '../instance_variables.yml#/components/schemas/link'
        transactions:
          $ref: '../instance_variables.yml#/components/schemas/link'
        operations:
          $ref: '../instance_variables.yml#/components/schemas/link'
      required: [self, transactions, operations]
    id:
      $ref: '../instance_variables.yml#/components/schemas/id'
      description: A unique identifier for this claimable balance.
    asset:
      type: string
      description: The asset available to be claimed in the [SEP-11 form](https://github.com/stellar/stellar-protocol/blob/0c675fb3a482183dcf0f5db79c12685acf82a95c/ecosystem/sep-0011.md#values) `asset_code:issuing_address` or `native` (for XLM).
    amount:
      type: string
      description: The amount of `asset` that can be claimed.
    sponsor:
      $ref: '../instance_variables.yml#/components/schemas/address'
      description: The account id of the sponsor who is paying the reserves for this claimable balance.
    last_modified_ledger:
      $ref: '../instance_variables.yml#/components/schemas/last_modified_ledger'
      description: The sequence number of the last ledger in which this claimable balance was modified.
    last_modified_time:
      $ref: '../instance_variables.yml#/components/schemas/last_modified_time'
    claimants:
      type: array
      description: The list of entries which could claim the claimable balance.
      items:
        type: object
        properties:
          destination:
            $ref: '../instance_variables.yml#/components/schemas/address'
            description: The account ID who can claim the balance.
          predicate:
            $ref: '#/Predicate'
    flags:
      type: integer
      description: something
    paging_token:
      $ref: '../instance_variables.yml#/components/schemas/paging_token'
  required:
    - id
    - paging_token
    - asset
    - amount
    - last_modified_ledger
    - last_modified_time
Predicate:
  allOf:
    - $ref: '#/PredicateBase'
    - type: object
      properties:
        and:
          type: array
          description: The array will always contain two elements which also are predicates. This clause of the condition is satisfied if both of the two elements in the array are satisfied.
          items:
            $ref: '#/ShallowPredicate'
          minItems: 2
          maxItems: 2
        or:
          type: array
          description: The array will always contain two elements which also are predicates. This clause of the condition is satisfied if at least one of the two elements in the array are satisfied.
          items:
            $ref: '#/ShallowPredicate'
          minItems: 2
          maxItems: 2
        not:
          $ref: '#/ShallowPredicate'
          description: The value is also a predicate. This clause of the condition is satisfied if the value is _not_ satisfied.
ShallowPredicate:
  allOf:
    - $ref: '#/PredicateBase'
    - $ref: '#/PredicateAndTime'
    - $ref: '#/PredicateOrTime'
    - $ref: '#/PredicateNotTime'
PredicateBase:
  description: The condition which must be satisfied so `destination` can claim the balance.
  allOf:
    - type: object
      properties:
        unconditional:
          type: boolean
          description: If true it means this clause of the condition is always satisfied.
    - $ref: '#/PredicateTime'
PredicateAndTime:
  type: object
  description: The condition which must be satisfied so `destination` can claim the balance.
  properties:
    and:
      type: array
      description: The array will always contain two elements which also are predicates. This clause of the condition is satisfied if both of the two elements in the array are satisfied.
      items:
        $ref: '#/PredicateTime'
      minItems: 2
      maxItems: 2
PredicateOrTime:
  type: object
  properties:
    or:
      type: array
      description: The array will always contain two elements which also are predicates. This clause of the condition is satisfied if at least one of the two elements in the array are satisfied.
      items:
        $ref: '#/PredicateTime'
      minItems: 2
      maxItems: 2
PredicateNotTime:
  type: object
  properties:
    not:
      $ref: '#/PredicateTime'
      description: The value is also a predicate. This clause of the condition is satisfied if the value is _not_ satisfied.
PredicateTime:
  type: object
  properties:
    abs_before:
      type: string
      description: A customized ISO 8601 formatted string representing a deadline for when the claimable balance can be claimed. If the balance is claimed before the date then this clause of the condition is satisfied. The format of this date string is a custom extension on top of ISO 8601 format. It allows for years to be outside the 0000-9999 range. The dates are derived from a unix epoch value in range of signed 64 bit integer. This means the date expresses a much larger calendar range of 292277026596 years into future and -292471206707 years back in past. This custom extension format will add a `+` prefix on values that go beyond year 9999 into the future and for years that are prior to year 0 (B.C.E. per Gregorian calendar) it will add prefix of `-`.
      examples: ["2022-02-10T15:30:22Z", "+39121901036-03-29T15:30:22Z", "-7025-12-23T00:00:00Z"]
    abs_before_epoch:
      type: string
      description: A Unix epoch value in seconds representing the same deadline date for when the claimable balance can be claimed. It is the same date/time value that `absBefore` represents, just expressed in integral unix epoch seconds within the range of a signed 64bit integer.
    rel_before:
      type: string
      description: A relative deadline for when the claimable balance can be claimed. The value represents the number of seconds since the close time of the ledger which created the claimable balance. (i.e., the claimant must claim this balance before `n` seconds have passed since the balance was created.)
