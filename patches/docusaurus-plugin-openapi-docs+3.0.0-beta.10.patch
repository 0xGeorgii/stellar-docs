diff --git a/node_modules/docusaurus-plugin-openapi-docs/lib/index.js b/node_modules/docusaurus-plugin-openapi-docs/lib/index.js
index b3bd303..e10ff98 100644
--- a/node_modules/docusaurus-plugin-openapi-docs/lib/index.js
+++ b/node_modules/docusaurus-plugin-openapi-docs/lib/index.js
@@ -25,7 +25,7 @@ function isURL(str) {
     return /^(https?:)\/\//m.test(str);
 }
 exports.isURL = isURL;
-function getDocsPluginConfig(presetsPlugins, pluginId) {
+function getDocsPluginConfig(presetsPlugins, plugin, pluginId) {
     // eslint-disable-next-line array-callback-return
     const filteredConfig = presetsPlugins.filter((data) => {
         // Search presets
@@ -34,8 +34,7 @@ function getDocsPluginConfig(presetsPlugins, pluginId) {
                 return data[1];
             }
             // Search plugin-content-docs instances
-            if (typeof data[0] === "string" &&
-                data[0] === "@docusaurus/plugin-content-docs") {
+            if (typeof data[0] === "string" && data[0] === plugin) {
                 const configPluginId = data[1].id ? data[1].id : "default";
                 if (configPluginId === pluginId) {
                     return data[1];
@@ -49,7 +48,7 @@ function getDocsPluginConfig(presetsPlugins, pluginId) {
             return filteredConfig[1].docs;
         }
         // Search plugin-content-docs instances
-        if (filteredConfig[0] === "@docusaurus/plugin-content-docs") {
+        if (filteredConfig[0] === plugin) {
             const configPluginId = filteredConfig[1].id
                 ? filteredConfig[1].id
                 : "default";
@@ -68,23 +67,23 @@ function getPluginInstances(plugins) {
     return plugins.filter((data) => data[0] === "docusaurus-plugin-openapi-docs");
 }
 function pluginOpenAPIDocs(context, options) {
-    const { config, docsPluginId } = options;
+    const { config, docsPlugin = "@docusaurus/plugin-content-docs", docsPluginId, } = options;
     const { siteDir, siteConfig } = context;
     // Get routeBasePath and path from plugin-content-docs or preset
     const presets = siteConfig.presets;
     const plugins = siteConfig.plugins;
     const presetsPlugins = presets.concat(plugins);
-    let docData = getDocsPluginConfig(presetsPlugins, docsPluginId);
+    let docData = getDocsPluginConfig(presetsPlugins, docsPlugin, docsPluginId);
     let docRouteBasePath = docData ? docData.routeBasePath : undefined;
     let docPath = docData ? (docData.path ? docData.path : "docs") : undefined;
     async function generateApiDocs(options, pluginId) {
         var _a, _b, _c, _d;
-        let { specPath, outputDir, template, markdownGenerators, downloadUrl, sidebarOptions, } = options;
+        let { specPath, outputDir, template, markdownGenerators, downloadUrl, sidebarOptions, disableCompression, } = options;
         // Remove trailing slash before proceeding
         outputDir = outputDir.replace(/\/$/, "");
         // Override docPath if pluginId provided
         if (pluginId) {
-            docData = getDocsPluginConfig(presetsPlugins, pluginId);
+            docData = getDocsPluginConfig(presetsPlugins, docsPlugin, pluginId);
             docRouteBasePath = docData ? docData.routeBasePath : undefined;
             docPath = docData ? (docData.path ? docData.path : "docs") : undefined;
         }
@@ -200,9 +199,9 @@ import {useCurrentSidebarCategory} from '@docusaurus/theme-common';
       `;
             const schemaMdTemplate = `---
 id: {{{id}}}
-title: "{{{title}}}"
+title: "The {{{title}}} Object"
 description: "{{{frontMatter.description}}}"
-sidebar_label: "{{{title}}}"
+sidebar_label: "The {{{title}}} Object"
 hide_title: true
 schema: true
 custom_edit_url: null
@@ -236,9 +235,11 @@ custom_edit_url: null
                     // const deserialize = (s: any) => {
                     //   return zlib.inflateSync(Buffer.from(s, "base64")).toString();
                     // };
-                    item.json = zlib_1.default
-                        .deflateSync(JSON.stringify(item.api))
-                        .toString("base64");
+                    disableCompression === true
+                        ? (item.json = JSON.stringify(item.api))
+                        : (item.json = zlib_1.default
+                            .deflateSync(JSON.stringify(item.api))
+                            .toString("base64"));
                     let infoBasePath = `${outputDir}/${item.infoId}`;
                     if (docRouteBasePath) {
                         infoBasePath = `${docRouteBasePath}/${outputDir
@@ -334,11 +335,7 @@ custom_edit_url: null
             cwd: path_1.default.resolve(apiDir),
             deep: 1,
         });
-        const schemaMdxFiles = await (0, utils_1.Globby)(["*.schema.mdx"], {
-            cwd: path_1.default.resolve(apiDir, "schemas"),
-            deep: 1,
-        });
-        const sidebarFile = await (0, utils_1.Globby)(["sidebar.js"], {
+        const sidebarFile = await (0, utils_1.Globby)(["sidebar.js", "sidebar.ts"], {
             cwd: path_1.default.resolve(apiDir),
             deep: 1,
         });
@@ -350,14 +347,15 @@ custom_edit_url: null
                 console.log(chalk_1.default.green(`Cleanup succeeded for "${apiDir}/${mdx}"`));
             }
         }));
-        schemaMdxFiles.map((mdx) => fs_1.default.unlink(`${apiDir}/schemas/${mdx}`, (err) => {
-            if (err) {
-                console.error(chalk_1.default.red(`Cleanup failed for "${apiDir}/schemas/${mdx}"`), chalk_1.default.yellow(err));
-            }
-            else {
-                console.log(chalk_1.default.green(`Cleanup succeeded for "${apiDir}/schemas/${mdx}"`));
+        try {
+            fs_1.default.rmSync(`${apiDir}/schemas`, { recursive: true });
+            console.log(chalk_1.default.green(`Cleanup succeeded for "${apiDir}/schemas"`));
+        }
+        catch (err) {
+            if (err.code !== "ENOENT") {
+                console.error(chalk_1.default.red(`Cleanup failed for "${apiDir}/schemas"`), chalk_1.default.yellow(err));
             }
-        }));
+        }
         sidebarFile.map((sidebar) => fs_1.default.unlink(`${apiDir}/${sidebar}`, (err) => {
             if (err) {
                 console.error(chalk_1.default.red(`Cleanup failed for "${apiDir}/${sidebar}"`), chalk_1.default.yellow(err));
diff --git a/node_modules/docusaurus-plugin-openapi-docs/lib/openapi/openapi.js b/node_modules/docusaurus-plugin-openapi-docs/lib/openapi/openapi.js
index d772a21..0ab0497 100644
--- a/node_modules/docusaurus-plugin-openapi-docs/lib/openapi/openapi.js
+++ b/node_modules/docusaurus-plugin-openapi-docs/lib/openapi/openapi.js
@@ -61,7 +61,7 @@ async function createPostmanCollection(openapiData) {
     return await jsonToCollection(data);
 }
 function createItems(openapiData, options, sidebarOptions) {
-    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4;
+    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
     // TODO: Find a better way to handle this
     let items = [];
     const infoIdSpaces = openapiData.info.title.replace(" ", "-").toLowerCase();
@@ -324,42 +324,47 @@ function createItems(openapiData, options, sidebarOptions) {
             items.push(apiPage);
         }
     }
-    if ((options === null || options === void 0 ? void 0 : options.showSchemas) === true) {
+    if ((options === null || options === void 0 ? void 0 : options.showSchemas) === true ||
+        Object.entries((_1 = (_0 = openapiData === null || openapiData === void 0 ? void 0 : openapiData.components) === null || _0 === void 0 ? void 0 : _0.schemas) !== null && _1 !== void 0 ? _1 : {})
+            .flatMap(([_, s]) => s["x-tags"])
+            .filter((item) => !!item).length > 0) {
         // Gather schemas
-        for (let [schema, schemaObject] of Object.entries((_1 = (_0 = openapiData === null || openapiData === void 0 ? void 0 : openapiData.components) === null || _0 === void 0 ? void 0 : _0.schemas) !== null && _1 !== void 0 ? _1 : {})) {
-            const baseIdSpaces = (_3 = (_2 = schemaObject === null || schemaObject === void 0 ? void 0 : schemaObject.title) === null || _2 === void 0 ? void 0 : _2.replace(" ", "-").toLowerCase()) !== null && _3 !== void 0 ? _3 : "";
-            const baseId = (0, kebabCase_1.default)(baseIdSpaces);
-            const schemaDescription = schemaObject.description;
-            let splitDescription;
-            if (schemaDescription) {
-                splitDescription = schemaDescription.match(/[^\r\n]+/g);
-            }
-            const schemaPage = {
-                type: "schema",
-                id: baseId,
-                infoId: infoId !== null && infoId !== void 0 ? infoId : "",
-                unversionedId: baseId,
-                title: schemaObject.title
-                    ? schemaObject.title.replace(/((?:^|[^\\])(?:\\{2})*)"/g, "$1'")
-                    : schema,
-                description: schemaObject.description
-                    ? schemaObject.description.replace(/((?:^|[^\\])(?:\\{2})*)"/g, "$1'")
-                    : "",
-                frontMatter: {
-                    description: splitDescription
-                        ? splitDescription[0]
-                            .replace(/((?:^|[^\\])(?:\\{2})*)"/g, "$1'")
-                            .replace(/\s+$/, "")
+        for (let [schema, schemaObject] of Object.entries((_3 = (_2 = openapiData === null || openapiData === void 0 ? void 0 : openapiData.components) === null || _2 === void 0 ? void 0 : _2.schemas) !== null && _3 !== void 0 ? _3 : {})) {
+            if ((options === null || options === void 0 ? void 0 : options.showSchemas) === true || schemaObject["x-tags"]) {
+                const baseIdSpaces = (_5 = (_4 = schemaObject === null || schemaObject === void 0 ? void 0 : schemaObject.title) === null || _4 === void 0 ? void 0 : _4.replace(" ", "-").toLowerCase()) !== null && _5 !== void 0 ? _5 : "";
+                const baseId = (0, kebabCase_1.default)(baseIdSpaces);
+                const schemaDescription = schemaObject.description;
+                let splitDescription;
+                if (schemaDescription) {
+                    splitDescription = schemaDescription.match(/[^\r\n]+/g);
+                }
+                const schemaPage = {
+                    type: "schema",
+                    id: baseId,
+                    infoId: infoId !== null && infoId !== void 0 ? infoId : "",
+                    unversionedId: baseId,
+                    title: schemaObject.title
+                        ? schemaObject.title.replace(/((?:^|[^\\])(?:\\{2})*)"/g, "$1'")
+                        : schema,
+                    description: schemaObject.description
+                        ? schemaObject.description.replace(/((?:^|[^\\])(?:\\{2})*)"/g, "$1'")
                         : "",
-                },
-                schema: schemaObject,
-            };
-            items.push(schemaPage);
+                    frontMatter: {
+                        description: splitDescription
+                            ? splitDescription[0]
+                                .replace(/((?:^|[^\\])(?:\\{2})*)"/g, "$1'")
+                                .replace(/\s+$/, "")
+                            : "",
+                    },
+                    schema: schemaObject,
+                };
+                items.push(schemaPage);
+            }
         }
     }
     if ((sidebarOptions === null || sidebarOptions === void 0 ? void 0 : sidebarOptions.categoryLinkSource) === "tag") {
         // Get global tags
-        const tags = (_4 = openapiData.tags) !== null && _4 !== void 0 ? _4 : [];
+        const tags = (_6 = openapiData.tags) !== null && _6 !== void 0 ? _6 : [];
         // Get operation tags
         const apiItems = items.filter((item) => {
             return item.type === "api";
diff --git a/node_modules/docusaurus-plugin-openapi-docs/lib/sidebars/index.js b/node_modules/docusaurus-plugin-openapi-docs/lib/sidebars/index.js
index 4d80d7b..35b5334 100644
--- a/node_modules/docusaurus-plugin-openapi-docs/lib/sidebars/index.js
+++ b/node_modules/docusaurus-plugin-openapi-docs/lib/sidebars/index.js
@@ -24,7 +24,7 @@ function isSchemaItem(item) {
     return item.type === "schema";
 }
 function groupByTags(items, sidebarOptions, options, tags, docPath) {
-    let { outputDir, label } = options;
+    let { outputDir, label, showSchemas } = options;
     // Remove trailing slash before proceeding
     outputDir = outputDir.replace(/\/$/, "");
     const { sidebarCollapsed, sidebarCollapsible, customProps, categoryLinkSource, } = sidebarOptions;
@@ -43,16 +43,21 @@ function groupByTags(items, sidebarOptions, options, tags, docPath) {
     const operationTags = (0, uniq_1.default)(apiItems
         .flatMap((item) => item.api.tags)
         .filter((item) => !!item));
-    // Combine globally defined tags with operation tags
-    // Only include global tag if referenced in operation tags
+    const schemaTags = (0, uniq_1.default)(schemaItems
+        .flatMap((item) => item.schema["x-tags"])
+        .filter((item) => !!item));
+    // Combine globally defined tags with operation and schema tags
+    // Only include global tag if referenced in operation/schema tags
     let apiTags = [];
     tags.flat().forEach((tag) => {
         // Should we also check x-displayName?
-        if (operationTags.includes(tag.name)) {
+        if (operationTags.includes(tag.name) || schemaTags.includes(tag.name)) {
             apiTags.push(tag.name);
         }
     });
-    apiTags = (0, uniq_1.default)(apiTags.concat(operationTags));
+    if (sidebarOptions.groupPathsBy !== "tagGroup") {
+        apiTags = (0, uniq_1.default)(apiTags.concat(operationTags, schemaTags));
+    }
     const basePath = docPath
         ? outputDir.split(docPath)[1].replace(/^\/+/g, "")
         : outputDir.slice(outputDir.indexOf("/", 1)).replace(/^\/+/g, "");
@@ -68,7 +73,7 @@ function groupByTags(items, sidebarOptions, options, tags, docPath) {
             }, item.api.method)
             : (0, clsx_1.default)({
                 "menu__list-item--deprecated": item.schema.deprecated,
-            });
+            }, "schema");
         return {
             type: "doc",
             id: basePath === "" || undefined ? `${id}` : `${basePath}/${id}`,
@@ -126,15 +131,15 @@ function groupByTags(items, sidebarOptions, options, tags, docPath) {
                     : (0, utils_1.posixPath)(path_1.default.join("/category", basePath, (0, lodash_1.kebabCase)(tag))),
             };
         }
+        const taggedApiItems = apiItems.filter((item) => { var _a; return !!((_a = item.api.tags) === null || _a === void 0 ? void 0 : _a.includes(tag)); });
+        const taggedSchemaItems = schemaItems.filter((item) => { var _a; return !!((_a = item.schema["x-tags"]) === null || _a === void 0 ? void 0 : _a.includes(tag)); });
         return {
             type: "category",
             label: (_a = tagObject === null || tagObject === void 0 ? void 0 : tagObject["x-displayName"]) !== null && _a !== void 0 ? _a : tag,
             link: linkConfig,
             collapsible: sidebarCollapsible,
             collapsed: sidebarCollapsed,
-            items: apiItems
-                .filter((item) => { var _a; return !!((_a = item.api.tags) === null || _a === void 0 ? void 0 : _a.includes(tag)); })
-                .map(createDocItem),
+            items: [...taggedSchemaItems, ...taggedApiItems].map(createDocItem),
         };
     })
         .filter((item) => item.items.length > 0); // Filter out any categories with no items.
@@ -157,14 +162,16 @@ function groupByTags(items, sidebarOptions, options, tags, docPath) {
         ];
     }
     let schemas = [];
-    if (schemaItems.length > 0) {
+    if (showSchemas && schemaItems.length > 0) {
         schemas = [
             {
                 type: "category",
                 label: "Schemas",
                 collapsible: sidebarCollapsible,
                 collapsed: sidebarCollapsed,
-                items: schemaItems.map(createDocItem),
+                items: schemaItems
+                    .filter(({ schema }) => !schema["x-tags"])
+                    .map(createDocItem),
             },
         ];
     }
